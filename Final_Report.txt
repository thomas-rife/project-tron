Original Project Plan:

1) Description: Our project is to create a version of the Tron game. The Tron game we are making is a two player game where
both players control a snake and try to avoid hitting the other players snake. The minimum requirements include setting
up the players, such as the controls and ability to move the snakes. Also, we need to implement the basic rules
of the game, such as the game ending when the snakes collide and the edges of the area that are out of bounds. We need to set 
up the background and the graphics of the snakes. A few possible extensions could include a score counter, a way to change the
 difficulty (speed) of the snakes, or the color of the snakes. We could also add target squares where if reached add a boost to the
snakes speed.

2) Schedule: progress made per week 
week 1: Have the player class fully finished along with its defintions and attributes. It will include the controls such as x and y coordinates, speed, direction, 
and overall movement that will be seen when playing the game.
week 2: Have the snake class and game class finished with all of its attributes and defintions listed. The snake class will address size and speed. 
week 3: Code the dimensions of the window and the displays for the game. i.e Start of the game and end of the game.
week 4: Create the new_game defintion which will return the the new players for each new game. Code the controls and how the keys work for the game. 
Lastly, code how the draw and move function interact with pathing, outcomes, and objects.

3) Pictures of interfaces: https://drive.google.com/file/d/13mqzyvBR8skKndhGcMAPwyUuXSA2jnA2/view?usp=sharing

4) Python Classes: The first class we would need would be the snake class. This class would need to have attributes that include the
size of the snake and the speed. Also, it would need to have the image or color of the snakes. It would need to have metholds to get
the positon of the snake as well change the position of the snake.  Another class we would need would be the game class. The game
class would need to have the attrubutes score, to keep track of each players score. Also, it would need to have defintions such as
start game, starting the snakes moving in the pointed direction, as well as a definition to change the snakes angle or direction. Finally,
we would need a player class, in order to set up two players and their scores. Also, it would take the users inputs and calls the defintions
in the other classes to change the snakes directions.

5) Because we are importing pygame, we will have access to all the pygame libraries, which is all we will be needing for this game. 
We will be using terminal with the text editor Visual Studio Code to complete this project.


Final project Plan:

1) The original form of the game stayed the same, with the controls, basic interface and mechanics staying the same. We did add most of the extensions that we talked about though, 
with a functioning score counter that goes up to 3 and restarts the game after a player reaches that amount, and a selector for the speed of the snakes, one for slow speed, one for fast
and one for normal. The reason we decided to implement these extensions instead of leaving the game the way we discussed from the start is because it really added to the user experience and 
overall gameplay. It's much more fun with the additions, and they weren't too difficult to make either. We also added gameplay and menu music, something we didn't talk about
in any of the proposals.

2) Schedule: 
Our schedle stayed mostly the same, only changing when we were adding the extensions where we saw fit. Near the end, we decided to implement the selector as it was just another couple calls to the
start game function, and we had to tweak the menu slightly to make it work. Other than that, the main game was made following the schedule and we had it completed by presentations.

3) Our interface stayed surprisingly the same, with the main menu using the same basic theme, although it does use a different image. It has a start button that is off to the left as opposed to the centered
one in our original design, and the two options for the speed on the right of the start button which was not included in the original mockup. The gameplay screen is largely the same with the colors of the
snakes being altered slightly from blue and pink to yellow and pink to better match the main menu screen. There is no ending menu screen, as we ended up using a text overlay on the gameplay screen to
display the winner. We did this because we found that it was less disruptive for the players of the game to navigate between multiple screens and move the mouse rather than just overlay the text and 
automatically return to the main menu to start again. It's faster and makes more sense.

4) For the classes, we ended up doing the exact same classes we outlined from the original proposal, that being a snake class, game class and a player class. The only one
we needed to add was a class to make buttons on the main menu, but other than that the classes and the things they do stayed the same.

5) The libraries we used did include pygame, as we stated in the original proposal, but we did end up needing to import the time and mixer module, for the timing and
playing music. We used Visual Studio Code as well. Also, we used the pygames documentation to learn how the functions and basic game designs are set up.

List of what everyone did:
Thomas - I worked mainly on the menu, UI design of the screen and and the buttons. I did the menu and the button files and added the menu music as well. I also helped with the
colors and the while loop function that makes the game run.
Robert - 
Brian - Worked mostly on the Tron file. Coded the snake class and most of the game and player class. I helped with making the 3 rounds function correctly,
as well as with the score. 

Description of difficulties we had and how we overcame them:
Multiple members of the group has issues with installing pygames and getting it to run. This greatly hindered our group as they were not able to work on the project until it got fixed. The issue
took a long time to fix as well. It took asking teachers, TA's and lots of time spent installing and re-installing in order to make it work. Other than that we had normal issue such as our code
not having the expected results and having bugs. We overcame this by trying different things and using resources when we became stuck.